<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
  <!-- 扫描业务层service实现类 -->
    <!-- <context:component-scan base-package="com.harme.**.impl" /> -->
    <!-- <context:component-scan base-package="com.harme"><context:include-filter type="regex" expression=".*.impl"/></context:component-scan> -->
    
<!-- 配置扫描路径 -->
     <context:component-scan base-package="com.cs">
     	<!-- 只扫描Service，也可以添加Repostory，但是要把Controller排除在外，Controller由spring-mvc.xml去加载 -->
     	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
     
    <!-- 引入jdbc配置文件 --> 
    <!--<context:property-placeholder location="classpath:jdbc.properties" />-->
    <bean class="com.lamb.utils.SpringConfigUtils">
        <property name="encoding" value="utf-8"/>
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
        <property name="encryptedProps">
            <set>
                <value>jdbc.url</value>
                <value>jdbc.username</value>
                <value>jdbc.password</value>
            </set>
        </property>
    </bean>

    	
	<!-- ========================================配置数据源========================================= -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${dbcp.maxActive}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${dbcp.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!-- 
        <property name="poolPreparedStatements" value="true" /> 
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> 
        -->
        <property name="validationQuery" value="${dbcp.validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat" />
        <property name="defaultAutoCommit" value="false"/>
    </bean>

 	<!-- enable autowire -->
    <context:annotation-config />
  
	<!--MyBatis integration with Spring as define sqlSessionFactory  spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-configuration.xml"/>
        <!-- <property name="mapperLocations" value="classpath*:com/harme/entity/*/mapper/*.xml" /> -->
    </bean>    

    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage可指定多个包，包与包之间用逗号（,）或分号（;）分割  -->
        <property name="basePackage" value="com.cs.entity.**.mapper"/>
        <!-- <property name="basePackage" value="com.harme.entity.mapper,com.harme.entity.config.mapper" /> -->
        <!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
    </bean>
    
    
    
    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />


</beans>